// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(PawsDayContext))]
    [Migration("20221017135136_updateblocktoken")]
    partial class updateblocktoken
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.Entities.AccountInfo", b =>
                {
                    b.Property<int>("AccountInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountInfoID")
                        .HasComment("帳號編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("帳號");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("建立時間");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime")
                        .HasComment("有效時間");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("密碼");

                    b.Property<bool>("Verify")
                        .HasColumnType("bit")
                        .HasComment("驗證是否通過");

                    b.HasKey("AccountInfoId");

                    b.ToTable("AccountInfo");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AdProject", b =>
                {
                    b.Property<int>("AdProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdProjectId")
                        .HasComment("廣告編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime")
                        .HasComment("開始時間");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasComment("結束時間");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)")
                        .HasComment("價格");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("商品編號");

                    b.HasKey("AdProjectId");

                    b.HasIndex("ProductId");

                    b.ToTable("AdProject");

                    b.HasData(
                        new
                        {
                            AdProjectId = 1,
                            BeginDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 300m,
                            ProductId = 1
                        },
                        new
                        {
                            AdProjectId = 2,
                            BeginDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 300m,
                            ProductId = 4
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnswerID")
                        .HasComment("答案紀錄編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerInput")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("答案");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasComment("題目編號");

                    b.HasKey("AnswerId");

                    b.HasIndex("MemberId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Aptitude", b =>
                {
                    b.Property<int>("AptitudeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AptitudeID")
                        .HasComment("測驗編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AptitudeExtrovert")
                        .HasColumnType("int")
                        .HasComment("保姆人格測驗項度E");

                    b.Property<int>("AptitudeFeeling")
                        .HasColumnType("int")
                        .HasComment("保姆人格測驗項度F");

                    b.Property<int>("AptitudeIntrovert")
                        .HasColumnType("int")
                        .HasComment("保姆人格測驗項度I");

                    b.Property<int>("AptitudeThinking")
                        .HasColumnType("int")
                        .HasComment("保姆人格測驗項度T");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.HasKey("AptitudeId");

                    b.HasIndex("MemberId");

                    b.ToTable("Aptitude");

                    b.HasData(
                        new
                        {
                            AptitudeId = 1,
                            AptitudeExtrovert = 60,
                            AptitudeFeeling = 20,
                            AptitudeIntrovert = 70,
                            AptitudeThinking = 50,
                            MemberId = 3
                        },
                        new
                        {
                            AptitudeId = 2,
                            AptitudeExtrovert = 80,
                            AptitudeFeeling = 90,
                            AptitudeIntrovert = 40,
                            AptitudeThinking = 60,
                            MemberId = 4
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.BlockToken", b =>
                {
                    b.Property<int>("BlockTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ExpireTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("ExpireTime")
                        .HasComment("有效時間");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Token");

                    b.HasKey("BlockTokenId");

                    b.ToTable("BlockToken");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID")
                        .HasComment("購物車編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("County")
                        .HasColumnType("int")
                        .HasComment("服務縣市");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("加入時間");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("顧客編號");

                    b.Property<int>("District")
                        .HasColumnType("int")
                        .HasComment("服務地區");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("商品編號");

                    b.HasKey("CartId");

                    b.HasIndex("County");

                    b.HasIndex("CustomerId");

                    b.HasIndex("District");

                    b.HasIndex("ProductId");

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            County = 1,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 616, DateTimeKind.Local).AddTicks(6273),
                            CustomerId = 1,
                            District = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CartId = 2,
                            County = 2,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 616, DateTimeKind.Local).AddTicks(6718),
                            CustomerId = 2,
                            District = 1,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.CartDetail", b =>
                {
                    b.Property<int>("CartDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartDetailID")
                        .HasComment("編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartID")
                        .HasComment("購物車編號");

                    b.Property<int>("PetType")
                        .HasColumnType("int")
                        .HasComment("寵物類型");

                    b.Property<int>("ShapeType")
                        .HasColumnType("int")
                        .HasComment("體型");

                    b.HasKey("CartDetailId");

                    b.HasIndex("CartId");

                    b.ToTable("CartDetail");

                    b.HasData(
                        new
                        {
                            CartDetailId = 1,
                            CartId = 1,
                            PetType = 0,
                            ShapeType = 0
                        },
                        new
                        {
                            CartDetailId = 2,
                            CartId = 1,
                            PetType = 1,
                            ShapeType = 0
                        },
                        new
                        {
                            CartDetailId = 3,
                            CartId = 2,
                            PetType = 0,
                            ShapeType = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.CartSchedule", b =>
                {
                    b.Property<int>("CartScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartScheduleID")
                        .HasComment("編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartID")
                        .HasComment("購物車編號");

                    b.Property<int>("Schedule")
                        .HasColumnType("int")
                        .HasComment("服務時程編號");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime")
                        .HasComment("服務日期");

                    b.HasKey("CartScheduleId");

                    b.HasIndex("CartId");

                    b.ToTable("CartSchedule");

                    b.HasData(
                        new
                        {
                            CartScheduleId = 1,
                            CartId = 1,
                            Schedule = 1,
                            ServiceDate = new DateTime(2022, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CartScheduleId = 2,
                            CartId = 1,
                            Schedule = 2,
                            ServiceDate = new DateTime(2022, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CartScheduleId = 3,
                            CartId = 2,
                            Schedule = 3,
                            ServiceDate = new DateTime(2022, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CartScheduleId = 4,
                            CartId = 2,
                            Schedule = 4,
                            ServiceDate = new DateTime(2022, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Collect", b =>
                {
                    b.Property<int>("CollectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CollectID")
                        .HasComment("編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("收藏商品編號");

                    b.HasKey("CollectId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProductId");

                    b.ToTable("Collect");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true);

                    b.Property<string>("ReplyContent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ReplyTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.County", b =>
                {
                    b.Property<int>("CountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountyID")
                        .HasComment("縣市編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountyName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("縣市名");

                    b.HasKey("CountyId");

                    b.ToTable("County");

                    b.HasData(
                        new
                        {
                            CountyId = 1,
                            CountyName = "台北市"
                        },
                        new
                        {
                            CountyId = 2,
                            CountyName = "新北市"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Disposition", b =>
                {
                    b.Property<int>("DispositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DispositionID")
                        .HasComment("性格編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DispositionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Disposition")
                        .HasComment("性格描述");

                    b.HasKey("DispositionId");

                    b.ToTable("Disposition");

                    b.HasData(
                        new
                        {
                            DispositionId = 1,
                            DispositionType = "活潑"
                        },
                        new
                        {
                            DispositionId = 2,
                            DispositionType = "友善"
                        },
                        new
                        {
                            DispositionId = 3,
                            DispositionType = "內向"
                        },
                        new
                        {
                            DispositionId = 4,
                            DispositionType = "黏人"
                        },
                        new
                        {
                            DispositionId = 5,
                            DispositionType = "敏感"
                        },
                        new
                        {
                            DispositionId = 6,
                            DispositionType = "固執"
                        },
                        new
                        {
                            DispositionId = 7,
                            DispositionType = "頑皮"
                        },
                        new
                        {
                            DispositionId = 8,
                            DispositionType = "膽小"
                        },
                        new
                        {
                            DispositionId = 9,
                            DispositionType = "暴力"
                        },
                        new
                        {
                            DispositionId = 10,
                            DispositionType = "好奇"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DistrictID")
                        .HasComment("地區編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountyId")
                        .HasColumnType("int")
                        .HasColumnName("CountyID")
                        .HasComment("縣市編號");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("地區名");

                    b.HasKey("DistrictId");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            DistrictId = 1,
                            CountyId = 1,
                            DistrictName = "萬華區"
                        },
                        new
                        {
                            DistrictId = 2,
                            CountyId = 1,
                            DistrictName = "大安區"
                        },
                        new
                        {
                            DistrictId = 3,
                            CountyId = 2,
                            DistrictName = "板橋區"
                        },
                        new
                        {
                            DistrictId = 4,
                            CountyId = 2,
                            DistrictName = "中和區"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Evaluation", b =>
                {
                    b.Property<int>("EvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EvaluationID")
                        .HasComment("評論編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("留言時間");

                    b.Property<int>("EvaluationScore")
                        .HasColumnType("int")
                        .HasColumnName("Evaluation")
                        .HasComment("評價");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("評論");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID")
                        .HasComment("對應訂單");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasComment("留言者");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasComment("留言身分");

                    b.HasKey("EvaluationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Evaluation");

                    b.HasData(
                        new
                        {
                            EvaluationId = 1,
                            CreateTime = new DateTime(2022, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluationScore = 4,
                            Message = "讚",
                            OrderId = 2,
                            UserId = 2,
                            UserType = 1
                        },
                        new
                        {
                            EvaluationId = 2,
                            CreateTime = new DateTime(2022, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluationScore = 5,
                            Message = "狗很乖",
                            OrderId = 2,
                            UserId = 4,
                            UserType = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookRegister", b =>
                {
                    b.Property<int>("FbregisterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FBRegisterID")
                        .HasComment("編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("FB登入序號");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.HasKey("FbregisterId");

                    b.HasIndex("MemberId");

                    b.ToTable("FacebookRegister");
                });

            modelBuilder.Entity("ApplicationCore.Entities.GoogleRegister", b =>
                {
                    b.Property<int>("GoogleRegisterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GoogleRegisterID")
                        .HasComment("編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Google登入序號");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.HasKey("GoogleRegisterId");

                    b.HasIndex("MemberId");

                    b.ToTable("GoogleRegister");
                });

            modelBuilder.Entity("ApplicationCore.Entities.InvoiceType", b =>
                {
                    b.Property<int>("InvoiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceTypeID")
                        .HasComment("發票類別編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("InvoiceType")
                        .HasComment("發票類別");

                    b.HasKey("InvoiceTypeId");

                    b.ToTable("InvoiceType");

                    b.HasData(
                        new
                        {
                            InvoiceTypeId = 1,
                            TypeName = "電子發票"
                        },
                        new
                        {
                            InvoiceTypeId = 2,
                            TypeName = "公司發票"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.License", b =>
                {
                    b.Property<int>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LicenseID")
                        .HasComment("證照編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LicenseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("證照連結");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.HasKey("LicenseId");

                    b.HasIndex("MemberId");

                    b.ToTable("License");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LineRegister", b =>
                {
                    b.Property<int>("LineRegisterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LineRegisterID")
                        .HasComment("編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Line登入序號");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.HasKey("LineRegisterId");

                    b.HasIndex("MemberId");

                    b.ToTable("LineRegister");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號(平台唯一會員編號)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountInfoId")
                        .HasColumnType("int")
                        .HasComment("帳號密碼資訊");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("詳細地址");

                    b.Property<DateTime?>("Birth")
                        .HasColumnType("date")
                        .HasComment("出生日期");

                    b.Property<int?>("County")
                        .HasColumnType("int")
                        .HasComment("縣市");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("資料成立時間");

                    b.Property<int?>("District")
                        .HasColumnType("int")
                        .HasComment("區域");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime")
                        .HasComment("資料編輯時間");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("信箱");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasComment("是否刪除");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("姓名");

                    b.Property<string>("NickName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("暱稱");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true)
                        .HasComment("電話");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("照片");

                    b.Property<int>("RegisterType")
                        .HasColumnType("int")
                        .HasComment("註冊方式");

                    b.Property<bool?>("Sex")
                        .HasColumnType("bit")
                        .HasComment("性別");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("會員狀態");

                    b.HasKey("MemberId");

                    b.HasIndex("AccountInfoId");

                    b.HasIndex("County");

                    b.HasIndex("District");

                    b.HasIndex("RegisterType");

                    b.ToTable("Member");

                    b.HasData(
                        new
                        {
                            MemberId = 1,
                            Address = "中華路二段",
                            Birth = new DateTime(1996, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            County = 1,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 611, DateTimeKind.Local).AddTicks(1186),
                            District = 1,
                            Email = "felix@gmail.com",
                            IsDelete = false,
                            Name = "Felix",
                            Phone = "0910666777",
                            ProfileImage = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/%E4%B8%8D%E4%BA%8C%E9%A6%AC%E9%BC%A0.jpg",
                            RegisterType = 1,
                            Sex = true,
                            Status = 1
                        },
                        new
                        {
                            MemberId = 2,
                            Address = "忠孝東路五段",
                            Birth = new DateTime(1998, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            County = 1,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 611, DateTimeKind.Local).AddTicks(8604),
                            District = 2,
                            Email = "anna@gmail.com",
                            IsDelete = false,
                            Name = "Anna",
                            Phone = "0955666321",
                            ProfileImage = "https://raw.githubusercontent.com/Ning0809/FileStorage/801f179b51b3724ec0150c65ccff42b34de88980/pug.jpg",
                            RegisterType = 1,
                            Sex = false,
                            Status = 1
                        },
                        new
                        {
                            MemberId = 3,
                            Address = "民族路一段",
                            Birth = new DateTime(1992, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            County = 2,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 611, DateTimeKind.Local).AddTicks(8626),
                            District = 1,
                            Email = "jake@gmail.com",
                            IsDelete = false,
                            Name = "Jake",
                            Phone = "0910555444",
                            ProfileImage = "https://raw.githubusercontent.com/Ning0809/FileStorage/801f179b51b3724ec0150c65ccff42b34de88980/pug.jpg",
                            RegisterType = 1,
                            Sex = true,
                            Status = 1
                        },
                        new
                        {
                            MemberId = 4,
                            Address = "德光路一段",
                            Birth = new DateTime(2000, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            County = 2,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 611, DateTimeKind.Local).AddTicks(8686),
                            District = 2,
                            Email = "wendy@gmail.com",
                            IsDelete = false,
                            Name = "Wendy",
                            Phone = "0910888999",
                            ProfileImage = "https://raw.githubusercontent.com/Ning0809/FileStorage/801f179b51b3724ec0150c65ccff42b34de88980/pug.jpg",
                            RegisterType = 1,
                            Sex = false,
                            Status = 1
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.OfficialContact", b =>
                {
                    b.Property<int>("OfficialContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OfficialContactID")
                        .HasComment("對話編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("發話時間");

                    b.Property<bool>("IsUserSpeak")
                        .HasColumnType("bit")
                        .HasComment("使用者發話");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("對話內容");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasComment("訂單編號");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasComment("使用者ID");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasComment("使用者種類");

                    b.HasKey("OfficialContactId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OfficialContact");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID")
                        .HasComment("訂單編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("服務詳細地址");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,0)")
                        .HasComment("訂單總額");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime2")
                        .HasComment("服務起始時間");

                    b.Property<string>("BookingEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("訂購人信箱");

                    b.Property<string>("BookingName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("訂購人姓名");

                    b.Property<string>("BookingPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true)
                        .HasComment("訂購人電話");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyName")
                        .HasComment("公司抬頭");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("訂單建立時間");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasComment("顧客會員編號");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("折扣優惠");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasComment("服務結束時間");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("InvoiceID")
                        .IsFixedLength(true)
                        .HasComment("發票號碼");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int")
                        .HasComment("發票開立方式");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("托育聯絡人姓名");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .IsFixedLength(false)
                        .HasComment("訂單號碼(顯示用)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int")
                        .HasComment("訂單狀態");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true)
                        .HasComment("托育聯絡人電話");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("商品編號(已鎖死不會被改變)");

                    b.Property<string>("ProductImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品照片(已鎖死不會被改變)");

                    b.Property<string>("ProductIntro")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("商品說明(已鎖死不會被改變)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("服務類型(已鎖死不會被改變)");

                    b.Property<int>("SitterId")
                        .HasColumnType("int")
                        .HasColumnName("SitterID")
                        .HasComment("保姆會員編號");

                    b.Property<string>("SitterName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("保姆名字(已鎖死不會被改變)");

                    b.Property<string>("UnoformNumber")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .HasColumnName("UnoformNumber")
                        .IsFixedLength(true)
                        .HasComment("統一編號");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceType");

                    b.HasIndex("SitterId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            Address = "中華路二段",
                            Amount = 600m,
                            BeginTime = new DateTime(2022, 9, 20, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingEmail = "felix@gmail.com",
                            BookingName = "Felix",
                            BookingPhone = "0910555666",
                            CreateTime = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            Discount = 0m,
                            EndTime = new DateTime(2022, 9, 20, 6, 59, 0, 0, DateTimeKind.Unspecified),
                            InvoiceId = "AB11111111",
                            InvoiceType = 1,
                            Name = "Felix",
                            OrderNumber = "KS0001",
                            OrderStatus = 0,
                            Phone = "0910555666",
                            ProductId = 1,
                            ProductImageUrl = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample2.webp",
                            ProductIntro = "毛小愛Fluv是一個為現代毛爸媽打造的寵物保姆平台APP，使用美國寵物保姆訓練課程和AI數據媒合寵物保姆，所有保姆、美容師、遛狗師等皆有通過「真心愛動物審核」，確保毛小孩會像家人般被對待—一對一、不關籠、全程拍照。為了貫徹我們「愛」的理念，毛小愛同時協助訓練再度中年婦女成為寵物保姆找到再次工作機會和與動物救援機構合作，使用部分營收中途浪浪和協助送養！",
                            ProductName = "到府照顧",
                            SitterId = 3,
                            SitterName = "Jake"
                        },
                        new
                        {
                            OrderId = 2,
                            Address = "德光路一段",
                            Amount = 800m,
                            BeginTime = new DateTime(2022, 9, 27, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingEmail = "anna@gmail.com",
                            BookingName = "Anna",
                            BookingPhone = "0910888999",
                            CompanyName = "日日毛掌公司",
                            CreateTime = new DateTime(2022, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            Discount = 0.8m,
                            EndTime = new DateTime(2022, 9, 27, 12, 59, 0, 0, DateTimeKind.Unspecified),
                            InvoiceId = "AB11111111",
                            InvoiceType = 2,
                            Name = "Anna",
                            OrderNumber = "KS0002",
                            OrderStatus = 0,
                            Phone = "0910888999",
                            ProductId = 5,
                            ProductImageUrl = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample2.webp",
                            ProductIntro = "毛小愛Fluv是一個為現代毛爸媽打造的寵物保姆平台APP，使用美國寵物保姆訓練課程和AI數據媒合寵物保姆，所有保姆、美容師、遛狗師等皆有通過「真心愛動物審核」，確保毛小孩會像家人般被對待—一對一、不關籠、全程拍照。為了貫徹我們「愛」的理念，毛小愛同時協助訓練再度中年婦女成為寵物保姆找到再次工作機會和與動物救援機構合作，使用部分營收中途浪浪和協助送養！",
                            ProductName = "到府洗澡",
                            SitterId = 4,
                            SitterName = "Wendy",
                            UnoformNumber = "12345678"
                        },
                        new
                        {
                            OrderId = 3,
                            Address = "德光路一段",
                            Amount = 800m,
                            BeginTime = new DateTime(2022, 9, 26, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingEmail = "anna@gmail.com",
                            BookingName = "Anna",
                            BookingPhone = "0910888999",
                            CreateTime = new DateTime(2022, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            Discount = 0.8m,
                            EndTime = new DateTime(2022, 9, 26, 12, 59, 0, 0, DateTimeKind.Unspecified),
                            InvoiceId = "AB11111112",
                            InvoiceType = 1,
                            Name = "Anna",
                            OrderNumber = "KS0003",
                            OrderStatus = 1,
                            Phone = "0910888999",
                            ProductId = 5,
                            ProductImageUrl = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample2.webp",
                            ProductIntro = "毛小愛Fluv是一個為現代毛爸媽打造的寵物保姆平台APP，使用美國寵物保姆訓練課程和AI數據媒合寵物保姆，所有保姆、美容師、遛狗師等皆有通過「真心愛動物審核」，確保毛小孩會像家人般被對待—一對一、不關籠、全程拍照。為了貫徹我們「愛」的理念，毛小愛同時協助訓練再度中年婦女成為寵物保姆找到再次工作機會和與動物救援機構合作，使用部分營收中途浪浪和協助送養！",
                            ProductName = "到府洗澡",
                            SitterId = 4,
                            SitterName = "Wendy"
                        },
                        new
                        {
                            OrderId = 4,
                            Address = "中華路二段",
                            Amount = 600m,
                            BeginTime = new DateTime(2022, 10, 14, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingEmail = "felix@gmail.com",
                            BookingName = "Felix",
                            BookingPhone = "0910555666",
                            CreateTime = new DateTime(2022, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            Discount = 0m,
                            EndTime = new DateTime(2022, 10, 14, 6, 59, 0, 0, DateTimeKind.Unspecified),
                            InvoiceId = "AB11111115",
                            InvoiceType = 1,
                            Name = "Felix",
                            OrderNumber = "KS0004",
                            OrderStatus = 0,
                            Phone = "0910555666",
                            ProductId = 1,
                            ProductImageUrl = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample2.webp",
                            ProductIntro = "毛小愛Fluv是一個為現代毛爸媽打造的寵物保姆平台APP，使用美國寵物保姆訓練課程和AI數據媒合寵物保姆，所有保姆、美容師、遛狗師等皆有通過「真心愛動物審核」，確保毛小孩會像家人般被對待—一對一、不關籠、全程拍照。為了貫徹我們「愛」的理念，毛小愛同時協助訓練再度中年婦女成為寵物保姆找到再次工作機會和與動物救援機構合作，使用部分營收中途浪浪和協助送養！",
                            ProductName = "到府照顧",
                            SitterId = 3,
                            SitterName = "Jake"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderCancel", b =>
                {
                    b.Property<int>("OrderCancelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderCancelID")
                        .HasComment("編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CancelDate")
                        .HasColumnType("datetime")
                        .HasComment("取消日期時間");

                    b.Property<string>("CancelReason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("取消原因");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID")
                        .HasComment("訂單編號");

                    b.Property<decimal>("RefundPersent")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("退還總價百分比");

                    b.HasKey("OrderCancelId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderCancel");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderPetDetail", b =>
                {
                    b.Property<int>("OrderPetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderPetID")
                        .HasComment("訂單寵物編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BirthMonth")
                        .HasColumnType("int")
                        .HasComment("出生月");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int")
                        .HasComment("出生年");

                    b.Property<bool>("Ligation")
                        .HasColumnType("bit")
                        .HasComment("是否結紮");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID")
                        .HasComment("訂單編號");

                    b.Property<string>("PetDiscription")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("個性敘述");

                    b.Property<string>("PetIntro")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("補充敘述");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("寵物名字");

                    b.Property<bool>("PetSex")
                        .HasColumnType("bit")
                        .HasComment("寵物性別");

                    b.Property<int>("PetType")
                        .HasColumnType("int")
                        .HasComment("寵物類型");

                    b.Property<int>("ServiceCount")
                        .HasColumnType("int")
                        .HasComment("服務計次");

                    b.Property<int>("ShapeType")
                        .HasColumnType("int")
                        .HasComment("體型");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,0)")
                        .HasComment("單價");

                    b.Property<bool>("Vaccine")
                        .HasColumnType("bit")
                        .HasComment("是否定期打預防針");

                    b.HasKey("OrderPetId")
                        .HasName("PK_OrderPetDetails");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderPetDetail");

                    b.HasData(
                        new
                        {
                            OrderPetId = 1,
                            BirthYear = 2022,
                            Ligation = false,
                            OrderId = 1,
                            PetName = "糖糖",
                            PetSex = false,
                            PetType = 0,
                            ServiceCount = 2,
                            ShapeType = 2,
                            UnitPrice = 300m,
                            Vaccine = true
                        },
                        new
                        {
                            OrderPetId = 2,
                            BirthYear = 2017,
                            Ligation = true,
                            OrderId = 2,
                            PetName = "豆皮",
                            PetSex = false,
                            PetType = 1,
                            ServiceCount = 2,
                            ShapeType = 1,
                            UnitPrice = 400m,
                            Vaccine = true
                        },
                        new
                        {
                            OrderPetId = 3,
                            BirthYear = 2017,
                            Ligation = true,
                            OrderId = 3,
                            PetName = "豆皮",
                            PetSex = false,
                            PetType = 1,
                            ServiceCount = 2,
                            ShapeType = 1,
                            UnitPrice = 400m,
                            Vaccine = true
                        },
                        new
                        {
                            OrderPetId = 4,
                            BirthYear = 2022,
                            Ligation = false,
                            OrderId = 4,
                            PetName = "Hippo",
                            PetSex = false,
                            PetType = 0,
                            ServiceCount = 2,
                            ShapeType = 2,
                            UnitPrice = 300m,
                            Vaccine = true
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderSchedule", b =>
                {
                    b.Property<int>("OrderScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderScheduleID")
                        .HasComment("編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID")
                        .HasComment("訂單編號");

                    b.Property<int>("Schedule")
                        .HasColumnType("int")
                        .HasComment("服務詳細時程");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime")
                        .HasComment("服務日期");

                    b.HasKey("OrderScheduleId");

                    b.HasIndex("OrderId");

                    b.HasIndex("Schedule");

                    b.ToTable("OrderSchedule");

                    b.HasData(
                        new
                        {
                            OrderScheduleId = 1,
                            OrderId = 1,
                            Schedule = 1,
                            ServiceDate = new DateTime(2022, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderScheduleId = 2,
                            OrderId = 1,
                            Schedule = 2,
                            ServiceDate = new DateTime(2022, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderScheduleId = 3,
                            OrderId = 2,
                            Schedule = 3,
                            ServiceDate = new DateTime(2022, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderScheduleId = 4,
                            OrderId = 2,
                            Schedule = 4,
                            ServiceDate = new DateTime(2022, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderScheduleId = 5,
                            OrderId = 3,
                            Schedule = 4,
                            ServiceDate = new DateTime(2022, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderScheduleId = 6,
                            OrderId = 3,
                            Schedule = 4,
                            ServiceDate = new DateTime(2022, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderScheduleId = 7,
                            OrderId = 4,
                            Schedule = 1,
                            ServiceDate = new DateTime(2022, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OrderScheduleId = 8,
                            OrderId = 4,
                            Schedule = 2,
                            ServiceDate = new DateTime(2022, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.PetDisposition", b =>
                {
                    b.Property<int>("PetDispositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PetDispositionID")
                        .HasComment("寵物性格編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DispositionType")
                        .HasColumnType("int")
                        .HasComment("性格描述");

                    b.Property<int>("PetId")
                        .HasColumnType("int")
                        .HasColumnName("PetID")
                        .HasComment("寵物編號");

                    b.HasKey("PetDispositionId");

                    b.HasIndex("DispositionType");

                    b.HasIndex("PetId");

                    b.ToTable("PetDisposition");

                    b.HasData(
                        new
                        {
                            PetDispositionId = 1,
                            DispositionType = 1,
                            PetId = 1
                        },
                        new
                        {
                            PetDispositionId = 2,
                            DispositionType = 1,
                            PetId = 2
                        },
                        new
                        {
                            PetDispositionId = 3,
                            DispositionType = 2,
                            PetId = 2
                        },
                        new
                        {
                            PetDispositionId = 4,
                            DispositionType = 1,
                            PetId = 3
                        },
                        new
                        {
                            PetDispositionId = 5,
                            DispositionType = 3,
                            PetId = 4
                        },
                        new
                        {
                            PetDispositionId = 6,
                            DispositionType = 1,
                            PetId = 5
                        },
                        new
                        {
                            PetDispositionId = 7,
                            DispositionType = 2,
                            PetId = 5
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.PetInfomation", b =>
                {
                    b.Property<int>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PetID")
                        .HasComment("寵物編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BirthMonth")
                        .HasColumnType("int")
                        .HasComment("出生月");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int")
                        .HasComment("出生年");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("資料建立時間");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime")
                        .HasComment("資料編輯時間");

                    b.Property<string>("Intro")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("補充介紹");

                    b.Property<bool>("Ligation")
                        .HasColumnType("bit")
                        .HasComment("是否結紮");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("寵物名字");

                    b.Property<bool>("PetSex")
                        .HasColumnType("bit")
                        .HasComment("寵物性別");

                    b.Property<int>("PetType")
                        .HasColumnType("int")
                        .HasComment("寵物類型");

                    b.Property<int>("ShapeType")
                        .HasColumnType("int")
                        .HasComment("體型");

                    b.Property<bool>("Vaccine")
                        .HasColumnType("bit")
                        .HasComment("是否定期打預防針");

                    b.HasKey("PetId")
                        .HasName("PK_PetInfomations");

                    b.HasIndex("MemberId");

                    b.ToTable("PetInfomation");

                    b.HasData(
                        new
                        {
                            PetId = 1,
                            BirthYear = 2022,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 612, DateTimeKind.Local).AddTicks(3157),
                            Ligation = false,
                            MemberId = 1,
                            PetName = "糖糖",
                            PetSex = false,
                            PetType = 0,
                            ShapeType = 2,
                            Vaccine = true
                        },
                        new
                        {
                            PetId = 2,
                            BirthYear = 2017,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 612, DateTimeKind.Local).AddTicks(3331),
                            Ligation = true,
                            MemberId = 2,
                            PetName = "豆皮",
                            PetSex = false,
                            PetType = 1,
                            ShapeType = 1,
                            Vaccine = true
                        },
                        new
                        {
                            PetId = 3,
                            BirthYear = 2019,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 612, DateTimeKind.Local).AddTicks(3334),
                            Ligation = true,
                            MemberId = 3,
                            PetName = "斑比",
                            PetSex = false,
                            PetType = 0,
                            ShapeType = 2,
                            Vaccine = true
                        },
                        new
                        {
                            PetId = 4,
                            BirthYear = 2018,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 612, DateTimeKind.Local).AddTicks(3336),
                            Ligation = true,
                            MemberId = 4,
                            PetName = "熊熊",
                            PetSex = false,
                            PetType = 0,
                            ShapeType = 0,
                            Vaccine = true
                        },
                        new
                        {
                            PetId = 5,
                            BirthYear = 2019,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 612, DateTimeKind.Local).AddTicks(3337),
                            Ligation = true,
                            MemberId = 4,
                            PetName = "Hippo",
                            PetSex = false,
                            PetType = 1,
                            ShapeType = 0,
                            Vaccine = true
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("商品編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("建立時間");

                    b.Property<DateTime>("EditTime")
                        .HasColumnType("datetime")
                        .HasComment("編輯時間");

                    b.Property<string>("Introduce")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("商品描述");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasComment("是否刪除");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int")
                        .HasComment("商品上架狀態");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int")
                        .HasComment("服務類型");

                    b.Property<int>("SitterId")
                        .HasColumnType("int")
                        .HasColumnName("SitterID")
                        .HasComment("保姆編號");

                    b.HasKey("ProductId");

                    b.HasIndex("ServiceType");

                    b.HasIndex("SitterId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 614, DateTimeKind.Local).AddTicks(263),
                            EditTime = new DateTime(2022, 10, 17, 21, 51, 35, 614, DateTimeKind.Local).AddTicks(424),
                            Introduce = "毛小愛Fluv是一個為現代毛爸媽打造的寵物保姆平台APP，使用美國寵物保姆訓練課程和AI數據媒合寵物保姆，所有保姆、美容師、遛狗師等皆有通過「真心愛動物審核」，確保毛小孩會像家人般被對待—一對一、不關籠、全程拍照。為了貫徹我們「愛」的理念，毛小愛同時協助訓練再度中年婦女成為寵物保姆找到再次工作機會和與動物救援機構合作，使用部分營收中途浪浪和協助送養！",
                            IsDelete = false,
                            ProductStatus = 0,
                            ServiceType = 1,
                            SitterId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 614, DateTimeKind.Local).AddTicks(700),
                            EditTime = new DateTime(2022, 10, 17, 21, 51, 35, 614, DateTimeKind.Local).AddTicks(702),
                            Introduce = "毛小愛Fluv是一個為現代毛爸媽打造的寵物保姆平台APP，使用美國寵物保姆訓練課程和AI數據媒合寵物保姆，所有保姆、美容師、遛狗師等皆有通過「真心愛動物審核」，確保毛小孩會像家人般被對待—一對一、不關籠、全程拍照。為了貫徹我們「愛」的理念，毛小愛同時協助訓練再度中年婦女成為寵物保姆找到再次工作機會和與動物救援機構合作，使用部分營收中途浪浪和協助送養！",
                            IsDelete = false,
                            ProductStatus = 0,
                            ServiceType = 2,
                            SitterId = 3
                        },
                        new
                        {
                            ProductId = 3,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 614, DateTimeKind.Local).AddTicks(705),
                            EditTime = new DateTime(2022, 10, 17, 21, 51, 35, 614, DateTimeKind.Local).AddTicks(706),
                            Introduce = "毛小愛Fluv是一個為現代毛爸媽打造的寵物保姆平台APP，使用美國寵物保姆訓練課程和AI數據媒合寵物保姆，所有保姆、美容師、遛狗師等皆有通過「真心愛動物審核」，確保毛小孩會像家人般被對待—一對一、不關籠、全程拍照。為了貫徹我們「愛」的理念，毛小愛同時協助訓練再度中年婦女成為寵物保姆找到再次工作機會和與動物救援機構合作，使用部分營收中途浪浪和協助送養！",
                            IsDelete = false,
                            ProductStatus = 1,
                            ServiceType = 3,
                            SitterId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 614, DateTimeKind.Local).AddTicks(708),
                            EditTime = new DateTime(2022, 10, 17, 21, 51, 35, 614, DateTimeKind.Local).AddTicks(709),
                            Introduce = "毛小愛Fluv是一個為現代毛爸媽打造的寵物保姆平台APP，使用美國寵物保姆訓練課程和AI數據媒合寵物保姆，所有保姆、美容師、遛狗師等皆有通過「真心愛動物審核」，確保毛小孩會像家人般被對待—一對一、不關籠、全程拍照。為了貫徹我們「愛」的理念，毛小愛同時協助訓練再度中年婦女成為寵物保姆找到再次工作機會和與動物救援機構合作，使用部分營收中途浪浪和協助送養！",
                            IsDelete = false,
                            ProductStatus = 0,
                            ServiceType = 1,
                            SitterId = 4
                        },
                        new
                        {
                            ProductId = 5,
                            CreateTime = new DateTime(2022, 10, 17, 21, 51, 35, 614, DateTimeKind.Local).AddTicks(711),
                            EditTime = new DateTime(2022, 10, 17, 21, 51, 35, 614, DateTimeKind.Local).AddTicks(712),
                            Introduce = "毛小愛Fluv是一個為現代毛爸媽打造的寵物保姆平台APP，使用美國寵物保姆訓練課程和AI數據媒合寵物保姆，所有保姆、美容師、遛狗師等皆有通過「真心愛動物審核」，確保毛小孩會像家人般被對待—一對一、不關籠、全程拍照。為了貫徹我們「愛」的理念，毛小愛同時協助訓練再度中年婦女成為寵物保姆找到再次工作機會和與動物救援機構合作，使用部分營收中途浪浪和協助送養！",
                            IsDelete = false,
                            ProductStatus = 0,
                            ServiceType = 2,
                            SitterId = 4
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductDiscount", b =>
                {
                    b.Property<int>("ProductDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductDiscountID")
                        .HasComment("商品折扣編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,0)")
                        .HasComment("設定折扣");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("商品編號");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("數量");

                    b.HasKey("ProductDiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDiscount");

                    b.HasData(
                        new
                        {
                            ProductDiscountId = 1,
                            Discount = 0.8m,
                            ProductId = 1,
                            Quantity = 3
                        },
                        new
                        {
                            ProductDiscountId = 2,
                            Discount = 0.9m,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            ProductDiscountId = 3,
                            Discount = 0.6m,
                            ProductId = 4,
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductImage", b =>
                {
                    b.Property<int>("ImagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImagesID")
                        .HasComment("圖片編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("圖片連結");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("商品編號");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("圖片排序");

                    b.HasKey("ImagesId")
                        .HasName("PK_ProductImages");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");

                    b.HasData(
                        new
                        {
                            ImagesId = 1,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample2.webp",
                            ProductId = 1,
                            Sort = 1
                        },
                        new
                        {
                            ImagesId = 2,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample3.webp",
                            ProductId = 1,
                            Sort = 2
                        },
                        new
                        {
                            ImagesId = 3,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample5.webp",
                            ProductId = 1,
                            Sort = 3
                        },
                        new
                        {
                            ImagesId = 4,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample2.webp",
                            ProductId = 2,
                            Sort = 2
                        },
                        new
                        {
                            ImagesId = 5,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample3.webp",
                            ProductId = 2,
                            Sort = 1
                        },
                        new
                        {
                            ImagesId = 6,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample5.webp",
                            ProductId = 2,
                            Sort = 3
                        },
                        new
                        {
                            ImagesId = 7,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample2.webp",
                            ProductId = 3,
                            Sort = 2
                        },
                        new
                        {
                            ImagesId = 8,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample3.webp",
                            ProductId = 3,
                            Sort = 3
                        },
                        new
                        {
                            ImagesId = 9,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample5.webp",
                            ProductId = 3,
                            Sort = 1
                        },
                        new
                        {
                            ImagesId = 10,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample2.webp",
                            ProductId = 4,
                            Sort = 1
                        },
                        new
                        {
                            ImagesId = 11,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample3.webp",
                            ProductId = 4,
                            Sort = 3
                        },
                        new
                        {
                            ImagesId = 12,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample5.webp",
                            ProductId = 4,
                            Sort = 2
                        },
                        new
                        {
                            ImagesId = 13,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample2.webp",
                            ProductId = 5,
                            Sort = 2
                        },
                        new
                        {
                            ImagesId = 14,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample3.webp",
                            ProductId = 5,
                            Sort = 3
                        },
                        new
                        {
                            ImagesId = 15,
                            Image = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample5.webp",
                            ProductId = 5,
                            Sort = 1
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductServiceArea", b =>
                {
                    b.Property<int>("ProductServiceAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductServiceAreaID")
                        .HasComment("編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("County")
                        .HasColumnType("int")
                        .HasComment("可服務縣市");

                    b.Property<int>("District")
                        .HasColumnType("int")
                        .HasComment("可服務地區");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("商品編號");

                    b.HasKey("ProductServiceAreaId");

                    b.HasIndex("County");

                    b.HasIndex("District");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductServiceArea");

                    b.HasData(
                        new
                        {
                            ProductServiceAreaId = 1,
                            County = 1,
                            District = 1,
                            ProductId = 1
                        },
                        new
                        {
                            ProductServiceAreaId = 2,
                            County = 1,
                            District = 2,
                            ProductId = 1
                        },
                        new
                        {
                            ProductServiceAreaId = 3,
                            County = 1,
                            District = 1,
                            ProductId = 2
                        },
                        new
                        {
                            ProductServiceAreaId = 4,
                            County = 1,
                            District = 2,
                            ProductId = 2
                        },
                        new
                        {
                            ProductServiceAreaId = 5,
                            County = 2,
                            District = 3,
                            ProductId = 2
                        },
                        new
                        {
                            ProductServiceAreaId = 6,
                            County = 2,
                            District = 4,
                            ProductId = 3
                        },
                        new
                        {
                            ProductServiceAreaId = 7,
                            County = 2,
                            District = 3,
                            ProductId = 3
                        },
                        new
                        {
                            ProductServiceAreaId = 8,
                            County = 2,
                            District = 4,
                            ProductId = 4
                        },
                        new
                        {
                            ProductServiceAreaId = 9,
                            County = 2,
                            District = 3,
                            ProductId = 4
                        },
                        new
                        {
                            ProductServiceAreaId = 10,
                            County = 2,
                            District = 4,
                            ProductId = 5
                        },
                        new
                        {
                            ProductServiceAreaId = 11,
                            County = 2,
                            District = 3,
                            ProductId = 5
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductServicePetType", b =>
                {
                    b.Property<int>("ProductServicePetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductServicePetTypeID")
                        .HasComment("編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("OvernightPrice")
                        .HasColumnType("decimal(18,0)")
                        .HasComment("夜間單價");

                    b.Property<int>("PetType")
                        .HasColumnType("int")
                        .HasComment("可服務寵物類型");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)")
                        .HasComment("一般單價");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("商品編號");

                    b.Property<int>("ShapeType")
                        .HasColumnType("int")
                        .HasComment("可服務寵物體型");

                    b.HasKey("ProductServicePetTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductServicePetType");

                    b.HasData(
                        new
                        {
                            ProductServicePetTypeId = 1,
                            OvernightPrice = 500m,
                            PetType = 0,
                            Price = 300m,
                            ProductId = 1,
                            ShapeType = 0
                        },
                        new
                        {
                            ProductServicePetTypeId = 2,
                            OvernightPrice = 500m,
                            PetType = 0,
                            Price = 300m,
                            ProductId = 1,
                            ShapeType = 1
                        },
                        new
                        {
                            ProductServicePetTypeId = 3,
                            OvernightPrice = 500m,
                            PetType = 0,
                            Price = 300m,
                            ProductId = 1,
                            ShapeType = 2
                        },
                        new
                        {
                            ProductServicePetTypeId = 4,
                            OvernightPrice = 800m,
                            PetType = 0,
                            Price = 500m,
                            ProductId = 1,
                            ShapeType = 3
                        },
                        new
                        {
                            ProductServicePetTypeId = 5,
                            OvernightPrice = 800m,
                            PetType = 1,
                            Price = 500m,
                            ProductId = 1,
                            ShapeType = 0
                        },
                        new
                        {
                            ProductServicePetTypeId = 6,
                            OvernightPrice = 800m,
                            PetType = 1,
                            Price = 500m,
                            ProductId = 1,
                            ShapeType = 1
                        },
                        new
                        {
                            ProductServicePetTypeId = 7,
                            OvernightPrice = 800m,
                            PetType = 1,
                            Price = 500m,
                            ProductId = 1,
                            ShapeType = 2
                        },
                        new
                        {
                            ProductServicePetTypeId = 8,
                            OvernightPrice = 800m,
                            PetType = 0,
                            Price = 450m,
                            ProductId = 2,
                            ShapeType = 0
                        },
                        new
                        {
                            ProductServicePetTypeId = 9,
                            OvernightPrice = 800m,
                            PetType = 1,
                            Price = 450m,
                            ProductId = 2,
                            ShapeType = 0
                        },
                        new
                        {
                            ProductServicePetTypeId = 10,
                            OvernightPrice = 800m,
                            PetType = 0,
                            Price = 500m,
                            ProductId = 3,
                            ShapeType = 3
                        },
                        new
                        {
                            ProductServicePetTypeId = 11,
                            OvernightPrice = 800m,
                            PetType = 0,
                            Price = 500m,
                            ProductId = 3,
                            ShapeType = 4
                        },
                        new
                        {
                            ProductServicePetTypeId = 12,
                            OvernightPrice = 1200m,
                            PetType = 0,
                            Price = 600m,
                            ProductId = 4,
                            ShapeType = 0
                        },
                        new
                        {
                            ProductServicePetTypeId = 13,
                            OvernightPrice = 1200m,
                            PetType = 0,
                            Price = 600m,
                            ProductId = 4,
                            ShapeType = 1
                        },
                        new
                        {
                            ProductServicePetTypeId = 14,
                            OvernightPrice = 1200m,
                            PetType = 0,
                            Price = 600m,
                            ProductId = 4,
                            ShapeType = 2
                        },
                        new
                        {
                            ProductServicePetTypeId = 15,
                            OvernightPrice = 1200m,
                            PetType = 0,
                            Price = 400m,
                            ProductId = 5,
                            ShapeType = 2
                        },
                        new
                        {
                            ProductServicePetTypeId = 16,
                            OvernightPrice = 1200m,
                            PetType = 0,
                            Price = 400m,
                            ProductId = 5,
                            ShapeType = 3
                        },
                        new
                        {
                            ProductServicePetTypeId = 17,
                            OvernightPrice = 1200m,
                            PetType = 0,
                            Price = 400m,
                            ProductId = 5,
                            ShapeType = 4
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductServiceTime", b =>
                {
                    b.Property<int>("ProductServiceTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductServiceTimeID")
                        .HasComment("編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasComment("商品編號");

                    b.Property<int>("ServiceDay")
                        .HasColumnType("int")
                        .HasComment("可服務星期別");

                    b.Property<int>("ServicePartTime")
                        .HasColumnType("int")
                        .HasComment("可服務時段");

                    b.HasKey("ProductServiceTimeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductServiceTime");

                    b.HasData(
                        new
                        {
                            ProductServiceTimeId = 1,
                            ProductId = 1,
                            ServiceDay = 1,
                            ServicePartTime = 1
                        },
                        new
                        {
                            ProductServiceTimeId = 2,
                            ProductId = 1,
                            ServiceDay = 1,
                            ServicePartTime = 2
                        },
                        new
                        {
                            ProductServiceTimeId = 3,
                            ProductId = 1,
                            ServiceDay = 2,
                            ServicePartTime = 1
                        },
                        new
                        {
                            ProductServiceTimeId = 4,
                            ProductId = 1,
                            ServiceDay = 2,
                            ServicePartTime = 2
                        },
                        new
                        {
                            ProductServiceTimeId = 5,
                            ProductId = 1,
                            ServiceDay = 3,
                            ServicePartTime = 1
                        },
                        new
                        {
                            ProductServiceTimeId = 6,
                            ProductId = 1,
                            ServiceDay = 3,
                            ServicePartTime = 2
                        },
                        new
                        {
                            ProductServiceTimeId = 7,
                            ProductId = 2,
                            ServiceDay = 4,
                            ServicePartTime = 2
                        },
                        new
                        {
                            ProductServiceTimeId = 8,
                            ProductId = 2,
                            ServiceDay = 4,
                            ServicePartTime = 3
                        },
                        new
                        {
                            ProductServiceTimeId = 9,
                            ProductId = 2,
                            ServiceDay = 5,
                            ServicePartTime = 2
                        },
                        new
                        {
                            ProductServiceTimeId = 10,
                            ProductId = 2,
                            ServiceDay = 5,
                            ServicePartTime = 3
                        },
                        new
                        {
                            ProductServiceTimeId = 11,
                            ProductId = 3,
                            ServiceDay = 6,
                            ServicePartTime = 1
                        },
                        new
                        {
                            ProductServiceTimeId = 12,
                            ProductId = 3,
                            ServiceDay = 6,
                            ServicePartTime = 1
                        },
                        new
                        {
                            ProductServiceTimeId = 13,
                            ProductId = 4,
                            ServiceDay = 1,
                            ServicePartTime = 3
                        },
                        new
                        {
                            ProductServiceTimeId = 14,
                            ProductId = 4,
                            ServiceDay = 2,
                            ServicePartTime = 3
                        },
                        new
                        {
                            ProductServiceTimeId = 15,
                            ProductId = 4,
                            ServiceDay = 3,
                            ServicePartTime = 3
                        },
                        new
                        {
                            ProductServiceTimeId = 16,
                            ProductId = 5,
                            ServiceDay = 6,
                            ServicePartTime = 1
                        },
                        new
                        {
                            ProductServiceTimeId = 17,
                            ProductId = 5,
                            ServiceDay = 6,
                            ServicePartTime = 2
                        },
                        new
                        {
                            ProductServiceTimeId = 18,
                            ProductId = 5,
                            ServiceDay = 0,
                            ServicePartTime = 1
                        },
                        new
                        {
                            ProductServiceTimeId = 19,
                            ProductId = 5,
                            ServiceDay = 0,
                            ServicePartTime = 2
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.RegisterSitter", b =>
                {
                    b.Property<int>("SitterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SitterID")
                        .HasComment("保姆編號(不對外公開)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true)
                        .HasComment("收款帳號");

                    b.Property<string>("Bank")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasComment("收款銀行");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("送審時間");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime")
                        .HasComment("編輯時間");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("ID")
                        .IsFixedLength(true)
                        .HasComment("身分證編號");

                    b.Property<string>("Idimageback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IDImageback")
                        .HasComment("身分證反面");

                    b.Property<string>("Idimagefont")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IDImagefont")
                        .HasComment("身分證正面");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員編號");

                    b.Property<string>("PetExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PetExperience")
                        .HasComment("寵物經驗");

                    b.Property<int>("RegisterStatus")
                        .HasColumnType("int")
                        .HasComment("保姆審核狀態");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasComment("測驗總分");

                    b.Property<string>("SitterInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("保姆介紹");

                    b.Property<string>("SitterName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("保姆名字(預設會員資料)");

                    b.Property<string>("SitterPicture")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("保姆照片(預設會員資料)");

                    b.Property<DateTime?>("VerifyTime")
                        .HasColumnType("datetime")
                        .HasComment("審核時間");

                    b.HasKey("SitterId")
                        .HasName("PK_RegisterSitters");

                    b.HasIndex("MemberId");

                    b.ToTable("RegisterSitter");

                    b.HasData(
                        new
                        {
                            SitterId = 1,
                            Account = "1111111",
                            Bank = "822",
                            CreateTime = new DateTime(2018, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = "F120120120",
                            Idimageback = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample5.webp",
                            Idimagefont = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample3.webp",
                            MemberId = 3,
                            PetExperience = "我養過狗",
                            RegisterStatus = 1,
                            Score = 90,
                            SitterInfo = "I'm Jake",
                            SitterName = "傑克是你嗎",
                            SitterPicture = "https://raw.githubusercontent.com/Ning0809/FileStorage/801f179b51b3724ec0150c65ccff42b34de88980/pug.jpg",
                            VerifyTime = new DateTime(2022, 10, 17, 21, 51, 35, 613, DateTimeKind.Local).AddTicks(1682)
                        },
                        new
                        {
                            SitterId = 2,
                            Account = "222222222",
                            Bank = "808",
                            CreateTime = new DateTime(2015, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = "F220120120",
                            Idimageback = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample5.webp",
                            Idimagefont = "https://raw.githubusercontent.com/Ning0809/FileStorage/main/dogsample3.webp",
                            MemberId = 4,
                            PetExperience = "我養過貓",
                            RegisterStatus = 1,
                            Score = 80,
                            SitterInfo = "I'm Wendy",
                            SitterName = "溫蒂你好嗎",
                            SitterPicture = "https://raw.githubusercontent.com/Ning0809/FileStorage/801f179b51b3724ec0150c65ccff42b34de88980/pug.jpg",
                            VerifyTime = new DateTime(2022, 10, 17, 21, 51, 35, 613, DateTimeKind.Local).AddTicks(2755)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.RegisterType", b =>
                {
                    b.Property<int>("RegisterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RegisterID")
                        .HasComment("註冊方式編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("RegisterType")
                        .HasComment("註冊方式");

                    b.HasKey("RegisterId")
                        .HasName("PK_RegisterTypes");

                    b.ToTable("RegisterType");

                    b.HasData(
                        new
                        {
                            RegisterId = 1,
                            TypeName = "信箱"
                        },
                        new
                        {
                            RegisterId = 2,
                            TypeName = "Line"
                        },
                        new
                        {
                            RegisterId = 3,
                            TypeName = "Google"
                        },
                        new
                        {
                            RegisterId = 4,
                            TypeName = "Facebook"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleId")
                        .HasComment("角色編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleName")
                        .HasComment("角色名稱");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "NormalUser"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "SitterUser"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Administrator"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScheduleID")
                        .HasComment("時程別編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PartTimeId")
                        .HasColumnType("int");

                    b.Property<string>("TimeDesrcipt")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("時程細節說明");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule");

                    b.HasData(
                        new
                        {
                            ScheduleId = 1,
                            PartTimeId = 0,
                            TimeDesrcipt = "00:00~00:29"
                        },
                        new
                        {
                            ScheduleId = 2,
                            PartTimeId = 0,
                            TimeDesrcipt = "00:30~00:59"
                        },
                        new
                        {
                            ScheduleId = 3,
                            PartTimeId = 0,
                            TimeDesrcipt = "01:00~01:29"
                        },
                        new
                        {
                            ScheduleId = 4,
                            PartTimeId = 0,
                            TimeDesrcipt = "01:30~01:59"
                        },
                        new
                        {
                            ScheduleId = 5,
                            PartTimeId = 0,
                            TimeDesrcipt = "02:00~02:29"
                        },
                        new
                        {
                            ScheduleId = 6,
                            PartTimeId = 0,
                            TimeDesrcipt = "02:30~02:59"
                        },
                        new
                        {
                            ScheduleId = 7,
                            PartTimeId = 0,
                            TimeDesrcipt = "03:00~03:29"
                        },
                        new
                        {
                            ScheduleId = 8,
                            PartTimeId = 0,
                            TimeDesrcipt = "03:30~03:59"
                        },
                        new
                        {
                            ScheduleId = 9,
                            PartTimeId = 0,
                            TimeDesrcipt = "04:00~04:29"
                        },
                        new
                        {
                            ScheduleId = 10,
                            PartTimeId = 0,
                            TimeDesrcipt = "04:30~04:59"
                        },
                        new
                        {
                            ScheduleId = 11,
                            PartTimeId = 0,
                            TimeDesrcipt = "05:00~05:29"
                        },
                        new
                        {
                            ScheduleId = 12,
                            PartTimeId = 0,
                            TimeDesrcipt = "05:30~05:59"
                        },
                        new
                        {
                            ScheduleId = 13,
                            PartTimeId = 1,
                            TimeDesrcipt = "06:00~06:29"
                        },
                        new
                        {
                            ScheduleId = 14,
                            PartTimeId = 1,
                            TimeDesrcipt = "06:30~06:59"
                        },
                        new
                        {
                            ScheduleId = 15,
                            PartTimeId = 1,
                            TimeDesrcipt = "07:00~07:29"
                        },
                        new
                        {
                            ScheduleId = 16,
                            PartTimeId = 1,
                            TimeDesrcipt = "07:30~07:59"
                        },
                        new
                        {
                            ScheduleId = 17,
                            PartTimeId = 1,
                            TimeDesrcipt = "08:00~08:29"
                        },
                        new
                        {
                            ScheduleId = 18,
                            PartTimeId = 1,
                            TimeDesrcipt = "08:30~08:59"
                        },
                        new
                        {
                            ScheduleId = 19,
                            PartTimeId = 1,
                            TimeDesrcipt = "09:00~09:29"
                        },
                        new
                        {
                            ScheduleId = 20,
                            PartTimeId = 1,
                            TimeDesrcipt = "09:30~09:59"
                        },
                        new
                        {
                            ScheduleId = 21,
                            PartTimeId = 1,
                            TimeDesrcipt = "10:00~10:29"
                        },
                        new
                        {
                            ScheduleId = 22,
                            PartTimeId = 1,
                            TimeDesrcipt = "10:30~10:59"
                        },
                        new
                        {
                            ScheduleId = 23,
                            PartTimeId = 1,
                            TimeDesrcipt = "11:00~11:29"
                        },
                        new
                        {
                            ScheduleId = 24,
                            PartTimeId = 1,
                            TimeDesrcipt = "11:30~11:59"
                        },
                        new
                        {
                            ScheduleId = 25,
                            PartTimeId = 2,
                            TimeDesrcipt = "12:00~12:29"
                        },
                        new
                        {
                            ScheduleId = 26,
                            PartTimeId = 2,
                            TimeDesrcipt = "12:30~12:59"
                        },
                        new
                        {
                            ScheduleId = 27,
                            PartTimeId = 2,
                            TimeDesrcipt = "13:00~13:29"
                        },
                        new
                        {
                            ScheduleId = 28,
                            PartTimeId = 2,
                            TimeDesrcipt = "13:30~13:59"
                        },
                        new
                        {
                            ScheduleId = 29,
                            PartTimeId = 2,
                            TimeDesrcipt = "14:00~14:29"
                        },
                        new
                        {
                            ScheduleId = 30,
                            PartTimeId = 2,
                            TimeDesrcipt = "14:30~14:59"
                        },
                        new
                        {
                            ScheduleId = 31,
                            PartTimeId = 2,
                            TimeDesrcipt = "15:00~15:29"
                        },
                        new
                        {
                            ScheduleId = 32,
                            PartTimeId = 2,
                            TimeDesrcipt = "15:30~15:59"
                        },
                        new
                        {
                            ScheduleId = 33,
                            PartTimeId = 2,
                            TimeDesrcipt = "16:00~16:29"
                        },
                        new
                        {
                            ScheduleId = 34,
                            PartTimeId = 2,
                            TimeDesrcipt = "16:30~16:59"
                        },
                        new
                        {
                            ScheduleId = 35,
                            PartTimeId = 2,
                            TimeDesrcipt = "17:00~17:29"
                        },
                        new
                        {
                            ScheduleId = 36,
                            PartTimeId = 2,
                            TimeDesrcipt = "17:30~17:59"
                        },
                        new
                        {
                            ScheduleId = 37,
                            PartTimeId = 3,
                            TimeDesrcipt = "18:00~18:29"
                        },
                        new
                        {
                            ScheduleId = 38,
                            PartTimeId = 3,
                            TimeDesrcipt = "18:30~18:59"
                        },
                        new
                        {
                            ScheduleId = 39,
                            PartTimeId = 3,
                            TimeDesrcipt = "19:00~19:29"
                        },
                        new
                        {
                            ScheduleId = 40,
                            PartTimeId = 3,
                            TimeDesrcipt = "19:30~19:59"
                        },
                        new
                        {
                            ScheduleId = 41,
                            PartTimeId = 3,
                            TimeDesrcipt = "20:00~20:29"
                        },
                        new
                        {
                            ScheduleId = 42,
                            PartTimeId = 3,
                            TimeDesrcipt = "20:30~20:59"
                        },
                        new
                        {
                            ScheduleId = 43,
                            PartTimeId = 3,
                            TimeDesrcipt = "21:00~21:29"
                        },
                        new
                        {
                            ScheduleId = 44,
                            PartTimeId = 3,
                            TimeDesrcipt = "21:30~21:59"
                        },
                        new
                        {
                            ScheduleId = 45,
                            PartTimeId = 3,
                            TimeDesrcipt = "22:00~22:29"
                        },
                        new
                        {
                            ScheduleId = 46,
                            PartTimeId = 3,
                            TimeDesrcipt = "22:30~22:59"
                        },
                        new
                        {
                            ScheduleId = 47,
                            PartTimeId = 3,
                            TimeDesrcipt = "23:00~23:29"
                        },
                        new
                        {
                            ScheduleId = 48,
                            PartTimeId = 3,
                            TimeDesrcipt = "23:30~23:59"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceTypeID")
                        .HasComment("服務類型編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceIntro")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("服務說明");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ServiceType")
                        .HasComment("服務類型");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceType");

                    b.HasData(
                        new
                        {
                            ServiceTypeId = 1,
                            ServiceIntro = "＄200元起／30分鐘\r\n👉 專業實名認證寵物保姆到府照顧寵物\r\n👉 寵物保姆、餵食、環境清潔、陪伴玩耍、回報健康狀況、餵藥等客製服務\r\n👉 每次接待少量的毛小孩，細心顧及每個毛小孩的需求\r\n👉 全程與保姆維持連線，回報寵物狀況\r\n👉 平台預約全程含青杉保險與品質保障\r\n👉 鑰匙可以溝通警衛代收、信箱傳遞等方式",
                            TypeName = "到府照顧"
                        },
                        new
                        {
                            ServiceTypeId = 2,
                            ServiceIntro = "＄300元起／1小時起／1隻毛孩\r\n👉 寵物免出門! 寵物美容師攜帶工具到府幫寵物做小美容\r\n👉 小美容包含洗澡、按摩、剪指甲、清耳朵、擠肛門腺、修腳底毛、修屁股毛、含環境清理\r\n👉 服務前美容師會先跟毛孩培養感情、餵零食\r\n👉 若有特殊需求或是疾病毛孩，請先與美容師溝通\r\n👉 每次接待少量的毛小孩，細心顧及每個毛小孩的需求\r\n👉 全程與保姆維持連線，回報寵物狀況\r\n👉 平台預約全程含青杉保險與品質保障",
                            TypeName = "到府洗澡"
                        },
                        new
                        {
                            ServiceTypeId = 3,
                            ServiceIntro = "＄100元起／30分鐘起\r\n👉 無法掌控回家時間? 保姆可到府帶狗狗出門散步\r\n👉 出門不能帶狗狗進餐廳? 保姆可約地點接狗狗散步\r\n👉 每次接待少量的毛小孩，細心顧及每個毛小孩的需求\r\n👉 全程與保姆維持連線，回報寵物狀況\r\n👉 平台預約全程含青杉保險與品質保障\r\n👉 鑰匙可以溝通警衛代收、信箱傳遞等方式",
                            TypeName = "陪伴散步"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserContact", b =>
                {
                    b.Property<int>("UserContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserContactID")
                        .HasComment("對話編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("發話時間");

                    b.Property<bool>("IsMemberSpeak")
                        .HasColumnType("bit")
                        .HasComment("顧客發話");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("顧客ID");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("對話內容");

                    b.Property<int>("SitterId")
                        .HasColumnType("int")
                        .HasColumnName("SitterID")
                        .HasComment("保姆ID");

                    b.HasKey("UserContactId");

                    b.HasIndex("MemberId");

                    b.HasIndex("SitterId");

                    b.ToTable("UserContact");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleId")
                        .HasComment("使用者角色編號")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleType")
                        .HasColumnType("int")
                        .HasColumnName("RoleType")
                        .HasComment("角色Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId")
                        .HasComment("使用者Id");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleType");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            RoleType = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            RoleType = 1,
                            UserId = 2
                        },
                        new
                        {
                            UserRoleId = 3,
                            RoleType = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserRoleId = 4,
                            RoleType = 2,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entities.AdProject", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("AdProject")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Advertise_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Answer", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Answer_MemberId")
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Aptitude", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Aptitude_Member")
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Cart", b =>
                {
                    b.HasOne("ApplicationCore.Entities.County", "CountyNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("County")
                        .HasConstraintName("FK_Cart_County")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Member", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Cart_Member")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.District", "DistrictNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("District")
                        .HasConstraintName("FK_Cart_District")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Cart_Product")
                        .IsRequired();

                    b.Navigation("CountyNavigation");

                    b.Navigation("Customer");

                    b.Navigation("DistrictNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CartDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_CartDetail_Cart")
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("ApplicationCore.Entities.CartSchedule", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Cart", "Cart")
                        .WithMany("CartSchedules")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_CartSchedule_Cart")
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Collect", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("Collects")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Collect_Member")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("Collects")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Collect_Product")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Evaluation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Order", "Order")
                        .WithMany("Evaluations")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Evaluation_Order")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Member", "User")
                        .WithMany("Evaluations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Evaluation_Member")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FacebookRegister", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("FacebookRegisters")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_FacebookRegister_Member")
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.GoogleRegister", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("GoogleRegisters")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_GoogleRegister_Member")
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.License", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_License_MemberId")
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LineRegister", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("LineRegisters")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_LineRegister_Member")
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Member", b =>
                {
                    b.HasOne("ApplicationCore.Entities.AccountInfo", "AccountInfoNavigation")
                        .WithMany("Members")
                        .HasForeignKey("AccountInfoId")
                        .HasConstraintName("FK_Member_AccountInfo");

                    b.HasOne("ApplicationCore.Entities.County", "CountyNavigation")
                        .WithMany("Members")
                        .HasForeignKey("County")
                        .HasConstraintName("FK_Member_County");

                    b.HasOne("ApplicationCore.Entities.District", "DistrictNavigation")
                        .WithMany("Members")
                        .HasForeignKey("District")
                        .HasConstraintName("FK_Member_District");

                    b.HasOne("ApplicationCore.Entities.RegisterType", "RegisterTypeNavigation")
                        .WithMany("Members")
                        .HasForeignKey("RegisterType")
                        .HasConstraintName("FK_Member_RegisterType")
                        .IsRequired();

                    b.Navigation("AccountInfoNavigation");

                    b.Navigation("CountyNavigation");

                    b.Navigation("DistrictNavigation");

                    b.Navigation("RegisterTypeNavigation");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OfficialContact", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Order", "Order")
                        .WithMany("OfficialContacts")
                        .HasForeignKey("OrderId");

                    b.HasOne("ApplicationCore.Entities.Member", "User")
                        .WithMany("OfficialContacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_OfficialContact_Member")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Customer")
                        .WithMany("OrderCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Order_Member1")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.InvoiceType", "InvoiceTypeNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceType")
                        .HasConstraintName("FK_Order_InvoiceType")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Member", "Sitter")
                        .WithMany("OrderSitters")
                        .HasForeignKey("SitterId")
                        .HasConstraintName("FK_Order_Member")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("InvoiceTypeNavigation");

                    b.Navigation("Sitter");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderCancel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Order", "Order")
                        .WithMany("OrderCancels")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderCancel_Order")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderPetDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Order", "Order")
                        .WithMany("OrderPetDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderPetDetail_Order")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ApplicationCore.Entities.OrderSchedule", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Order", "Order")
                        .WithMany("OrderSchedules")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderSchedule_Order")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Schedule", "ScheduleNavigation")
                        .WithMany("OrderSchedules")
                        .HasForeignKey("Schedule")
                        .HasConstraintName("FK_OrderSchedule_Schedule")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ScheduleNavigation");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PetDisposition", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Disposition", "DispositionTypeNavigation")
                        .WithMany("PetDispositions")
                        .HasForeignKey("DispositionType")
                        .HasConstraintName("FK_PetDisposition_Disposition")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.PetInfomation", "Pet")
                        .WithMany("PetDispositions")
                        .HasForeignKey("PetId")
                        .HasConstraintName("FK_PetDisposition_PetInfomation")
                        .IsRequired();

                    b.Navigation("DispositionTypeNavigation");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PetInfomation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("PetInfomations")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_PetInfomation_Member")
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ServiceType", "ServiceTypeNavigation")
                        .WithMany("Products")
                        .HasForeignKey("ServiceType")
                        .HasConstraintName("FK_Product_ServiceType")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Member", "Sitter")
                        .WithMany("Products")
                        .HasForeignKey("SitterId")
                        .HasConstraintName("FK_Product_Member")
                        .IsRequired();

                    b.Navigation("ServiceTypeNavigation");

                    b.Navigation("Sitter");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductDiscount", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductDiscount_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductImage", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductImage_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductServiceArea", b =>
                {
                    b.HasOne("ApplicationCore.Entities.County", "CountyNavigation")
                        .WithMany("ProductServiceAreas")
                        .HasForeignKey("County")
                        .HasConstraintName("FK_ProductServiceArea_County")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.District", "DistrictNavigation")
                        .WithMany("ProductServiceAreas")
                        .HasForeignKey("District")
                        .HasConstraintName("FK_ProductServiceArea_District")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("ProductServiceAreas")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductServiceArea_Product")
                        .IsRequired();

                    b.Navigation("CountyNavigation");

                    b.Navigation("DistrictNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductServicePetType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("ProductServicePetTypes")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductServicePetType_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProductServiceTime", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Product", "Product")
                        .WithMany("ProductServiceTimes")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductServiceTime_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RegisterSitter", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("RegisterSitters")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_RegisterSitter_Member")
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserContact", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("UserContactMembers")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_UserContact_Member")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Member", "Sitter")
                        .WithMany("UserContactSitters")
                        .HasForeignKey("SitterId")
                        .HasConstraintName("FK_UserContact_Member1")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Sitter");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserRole", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleType")
                        .HasConstraintName("FK_UserRoles_Role")
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Member", "Member")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRoles_Member")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AccountInfo", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Cart", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("CartSchedules");
                });

            modelBuilder.Entity("ApplicationCore.Entities.County", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Members");

                    b.Navigation("ProductServiceAreas");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Disposition", b =>
                {
                    b.Navigation("PetDispositions");
                });

            modelBuilder.Entity("ApplicationCore.Entities.District", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Members");

                    b.Navigation("ProductServiceAreas");
                });

            modelBuilder.Entity("ApplicationCore.Entities.InvoiceType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Member", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Collects");

                    b.Navigation("Evaluations");

                    b.Navigation("FacebookRegisters");

                    b.Navigation("GoogleRegisters");

                    b.Navigation("LineRegisters");

                    b.Navigation("OfficialContacts");

                    b.Navigation("OrderCustomers");

                    b.Navigation("OrderSitters");

                    b.Navigation("PetInfomations");

                    b.Navigation("Products");

                    b.Navigation("RegisterSitters");

                    b.Navigation("UserContactMembers");

                    b.Navigation("UserContactSitters");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Order", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("OfficialContacts");

                    b.Navigation("OrderCancels");

                    b.Navigation("OrderPetDetails");

                    b.Navigation("OrderSchedules");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PetInfomation", b =>
                {
                    b.Navigation("PetDispositions");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Product", b =>
                {
                    b.Navigation("AdProject");

                    b.Navigation("Carts");

                    b.Navigation("Collects");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductServiceAreas");

                    b.Navigation("ProductServicePetTypes");

                    b.Navigation("ProductServiceTimes");
                });

            modelBuilder.Entity("ApplicationCore.Entities.RegisterType", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Schedule", b =>
                {
                    b.Navigation("OrderSchedules");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ServiceType", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
